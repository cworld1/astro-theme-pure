---
import type { MarkdownHeading } from 'astro'
import type { CollectionEntry } from 'astro:content'

// Plugin styles
import 'katex/dist/katex.min.css'

import { Comment, MediumZoom } from 'astro-pure/advanced'
import { ArticleBottom, Copyright, Hero } from 'astro-pure/components/pages'
import PageLayout from '@/layouts/ContentLayout.astro'
import SafeTOC from '@/components/SafeTOC.astro'
import { getISOString } from '@/utils/date'
import config, { integ } from '@/site-config'

interface Props {
  post: CollectionEntry<'blog'>
  posts: CollectionEntry<'blog'>[]
  headings: MarkdownHeading[]
  remarkPluginFrontmatter: Record<string, unknown>
}

const {
  post: { id, data },
  posts,
  headings,
  remarkPluginFrontmatter
} = Astro.props

const {
  description,
  heroImage,
  publishDate,
  title,
  updatedDate,
  draft: isDraft,
  comment: enableComment
} = data

const socialImage = heroImage
  ? typeof heroImage.src === 'string'
    ? heroImage.src
    : heroImage.src.src
  : '/images/social-card.png'

// Using safe date handling functions
const articleDate =
  getISOString(updatedDate) ?? getISOString(publishDate) ?? new Date().toISOString()
const primaryColor = data.heroImage?.color ?? 'hsl(var(--primary) / var(--un-text-opacity))'
---

<PageLayout
  meta={{ articleDate, description, ogImage: socialImage, title }}
  highlightColor={primaryColor}
  back='/blog'
>
  {!!headings.length && <SafeTOC {headings} slot='sidebar' />}

  <Hero {data} {remarkPluginFrontmatter} slot='header' />

  <slot />

  <Fragment slot='bottom'>
    {/* Copyright */}
    <Copyright {data} />
    {/* Article recommend */}
    <ArticleBottom collections={posts} {id} class='mt-3 sm:mt-6' />
    {/* Comment */}
    {!isDraft && enableComment && <Comment class='mt-3 sm:mt-6' />}
  </Fragment>

  <slot name='bottom-sidebar' slot='bottom-sidebar' />
</PageLayout>

{integ.mediumZoom.enable && <MediumZoom />}

<script
  is:inline
  type='module'
  data-astro-rerun
  define:vars={{
    npmCDN: config.npmCDN,
    walineServer: config.integ.waline.server,
    walineEnabled: config.integ.waline.enable
  }}
>
  if (walineEnabled) {
    const loadPageviewCount = async () => {
      try {
        const pageview = await import(`${npmCDN}/@waline/client@v3/dist/pageview.js`)
        pageview.pageviewCount({
          serverURL: walineServer,
          path: window.location.pathname
        })
      } catch (error) {
        console.error('Failed to load pageview:', error)
      }
    }
    await loadPageviewCount()
  }
</script>
